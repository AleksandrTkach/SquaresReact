{"version":3,"sources":["components/Square/Block.js","scss/variables/Variables.js","components/Square/Row.js","components/Square/Square.js","components/App.js","serviceWorker.js","index.js"],"names":["Block","_ref","iRow","iCol","styleBlockSize","setPosition","useContext","PositionBtnMinusContent","_checkPosition","posRow","process","posCol","react_default","a","createElement","className","style","onMouseOver","onFocus","Row","initialWidth","row","i","push","Square_Block","key","Square","initialHeight","square","Square_Row","Fragment","INITIAL_HEIGHT","Number","INITIAL_WIDTH","height","concat","width","defaultPositionBtnMinus","React","createContext","App","_useState","useState","_useState2","Object","slicedToArray","positionBtnMinus","_useState3","_useState4","squareHeight","setHeight","_useState5","_useState6","squareWidth","setWidth","styleBlockPositionRow","top","styleBlockPositionColumn","left","_changeSizeSquare","direction","mathOperation","amountBlocks","arguments","length","undefined","btnsPlus","onKeyPress","role","tabIndex","onClick","btnsMinus","objectSpread","Provider","value","components_Square_Square","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85c20374.chunk.js","sourcesContent":["import React, {useContext} from 'react';\nimport {PositionBtnMinusContent} from 'components/App';\nimport {PaddingSize} from 'scss/variables/Variables.js';\n\nconst cellSize = process.env.REACT_APP_CELL_SIZE;\n\nconst Block = ({iRow, iCol, styleBlockSize}) => {\n    const {setPosition} = useContext(PositionBtnMinusContent);\n\n    const _checkPosition = () => {\n        setPosition({\n            'posRow': iRow * cellSize + PaddingSize * iRow,\n            'posCol': iCol * cellSize + PaddingSize * iCol\n        });\n\n    };\n\n    return (\n      <div\n        className=\"block block__blue\"\n        style={styleBlockSize}\n        onMouseOver={_checkPosition}\n        onFocus={_checkPosition}\n      />\n    )\n};\n\nexport default Block\n\n","export const PaddingSize = 2; // depends on $padding-size in ./Variables.scss\n","import React from 'react';\nimport Block from './Block';\n\nconst Row = ({styleBlockSize, initialWidth, iRow}) => {\n    const row = [];\n    for (let i = 0; i < initialWidth; i++) {\n        row.push(<Block key={i} iRow={iRow} iCol={i} styleBlockSize={styleBlockSize} />);\n    }\n\n    return(\n      <div className=\"square__line\">\n        {row}\n      </div>\n    )\n};\n\nexport default Row\n","import React from 'react';\nimport Row from './Row';\n\nconst Square = ({styleBlockSize, initialHeight, initialWidth}) => {\n    const square = [];\n    for (let i = 0; i < initialHeight; i++) {\n        square.push(<Row key={i} iRow={i} styleBlockSize={styleBlockSize} initialWidth={initialWidth} />);\n    }\n\n    return (\n      <>\n        {square}\n      </>\n    )\n};\n\nexport default Square\n","import React, {useState} from 'react';\nimport Square from './Square/Square';\nimport 'scss/App.scss';\n\nconst INITIAL_HEIGHT = Number(process.env.REACT_APP_INITIAL_HEIGHT);\nconst INITIAL_WIDTH = Number(process.env.REACT_APP_INITIAL_WIDTH);\nconst CELL_SIZE = process.env.REACT_APP_CELL_SIZE;\n\nconst styleBlockSize = {\n    height: `${CELL_SIZE}px`,\n    width: `${CELL_SIZE}px`,\n};\n\nconst defaultPositionBtnMinus = {\n    'posRow': 0,\n    'posCol': 0,\n};\n\nexport const PositionBtnMinusContent = React.createContext(defaultPositionBtnMinus);\n\nconst App = () => {\n    const [positionBtnMinus, setPosition] = useState(defaultPositionBtnMinus);\n    const [squareHeight, setHeight] = useState(INITIAL_HEIGHT);\n    const [squareWidth, setWidth] = useState(INITIAL_WIDTH);\n\n    const styleBlockPositionRow = {\n        top: `${positionBtnMinus.posRow}px`,\n    };\n    const styleBlockPositionColumn = {\n        left: `${positionBtnMinus.posCol}px`,\n    };\n\n    const _changeSizeSquare = (direction, mathOperation, amountBlocks = 1) => {\n        switch(mathOperation) {\n            case '+':\n                direction === 'height' ? setHeight(squareHeight + amountBlocks) : setWidth(squareWidth + amountBlocks);\n                break;\n            case '-':\n                if (direction === 'height') {\n                    if (squareHeight > 1) {\n                        setHeight(squareHeight - amountBlocks)\n                    }\n                } else {\n                    if (squareWidth > 1) {\n                        setWidth(squareWidth - amountBlocks);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    let btnsPlus = (\n      <>\n        <div\n          onKeyPress={() => _changeSizeSquare('height', '+')}\n          role=\"button\"\n          tabIndex=\"0\"\n          className=\"block block__orange block_plus-row\"\n          style={styleBlockSize}\n          onClick={() => _changeSizeSquare('height', '+')}\n        >\n          <i className=\"fa fa-plus\" />\n          row\n        </div>\n        <div\n          onKeyPress={() => _changeSizeSquare('width', '+')}\n          role=\"button\"\n          tabIndex=\"0\"\n          className=\"block block__orange block_plus-column\"\n          style={styleBlockSize}\n          onClick={() => _changeSizeSquare('width', '+')}\n        >\n          <i className=\"fa fa-plus\" />\n          col\n        </div>\n      </>\n    );\n\n    let btnsMinus = (\n      <>\n        <div\n          onKeyPress={() => _changeSizeSquare('height', '-')}\n          role=\"button\"\n          tabIndex=\"0\"\n          className=\"block block__red block_minus-row\"\n          style={{...styleBlockSize, ...styleBlockPositionRow}}\n          onClick={() => _changeSizeSquare('height', '-')}\n        >\n          <i className=\"fa fa-minus\" />\n          row\n        </div>\n        <div\n          onKeyPress={() => _changeSizeSquare('width', '-')}\n          role=\"button\"\n          tabIndex=\"0\"\n          className=\"block block__red block_minus-column\"\n          style={{...styleBlockSize, ...styleBlockPositionColumn}}\n          onClick={() => _changeSizeSquare('width', '-')}\n        >\n          <i className=\"fa fa-minus\" />\n          col\n        </div>\n      </>\n    );\n\n    return (\n      <PositionBtnMinusContent.Provider value={{ positionBtnMinus, setPosition }}>\n        <div className=\"square\">\n\n          <Square styleBlockSize={styleBlockSize} initialHeight={squareHeight} initialWidth={squareWidth} />\n\n          {btnsPlus}\n          {btnsMinus}\n\n        </div>\n      </PositionBtnMinusContent.Provider>\n    );\n};\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}